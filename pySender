#!/usr/bin/python

import time, logging, os, sys, subprocess, select, smtplib, socket
from pygelf import GelfTcpHandler, GelfUdpHandler, GelfTlsHandler

# GrayLog parameters
graylog_server = "Your GrayLog server ip address"
graylog_port = "GrayLog port"

# File to read
filename = "some file to read"

# Server settings
ip_address = os.popen('hostname -i').read()
hostname = os.popen('hostname').read()

# Email Settings
email_server = smtplib.SMTP('email-server', 25)
email_recipient = "email address"
email_message = "Subject: PySender for %s on %s stop\n\nPySender has stopped sending %s messages to GrayLog %s from %s" % (filename, graylog_server, filename, graylog_server, ip_address)


# Reading file contents
follow = subprocess.Popen(['tail','-F',filename],stdout = subprocess.PIPE, stderr = subprocess.PIPE)
polling = select.poll()
polling.register(follow.stdout)

# pygelf and logging parameters
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger()
logger.addHandler(GelfTcpHandler(host=graylog_server, port=graylog_port, _app_name='%s' % filename.split('/')[3], _ip_address=ip_address, _hostname=hostname, compress=False))

# Application log
LogFile = "/var/log/PySender/%s.log" % sys.argv[0]
hoy = datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d %H:%M:%S')
if os.path.isdir(LogFile) == False:
        subprocess.call('mkdir /var/log/PySend', shell=True)

# Check if tail -F is alive
def tail_alive():
        alive = os.popen("ps ax|grep 'tail -F %s'|grep -v grep|wc -l" % filename).read()[0]
        if int(alive) == 1:
                return True
        elif int(alive) > 1 or int(alive) < 1:
                log_file = open(LogFile, 'a')
                log_file.write(hoy + ' - tail - Bad %s\n' % alive)
                log_file.close()
                return False

# Check if port is listening
def port_available():
        try:
                port = socket.socket()
                port.settimeout(0.1)
                port_availability = port.connect((graylog_server, graylog_port))
                port.close()
        except:
                return False
        return True

Fail2Connect = 0

while True:
	if port_available() == True and Fail2Connect < 5:
		try:
			if polling.poll(0.1):
				message = "%s - %s" % (filename.split('/')[3], follow.stdout.readline())
				logging.info(message)
			time.sleep(0.1)
		except Exception,e:
                        log_file = open(LogFile, 'a')
                        log_file.write(hoy + ' - send failed - ' + str(e) + '\n')
                        log_file.close()
	elif port_available() == False and Fail2Connect < 5:
		Fail2Connect += 1
	elif Fail2Connect == 5:
		print "Unable to connect to GrayLog"
		break
if Fail2Connect == 5:
	print "Tried to restablish connection %s times every 0.1 secs, Closing Down" % Fail2Connect
	email_server.sendmail("PySender@%s" % filename.split('/')[3], email_recipient, email_message)
	sys.exit(1)
