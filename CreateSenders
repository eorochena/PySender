#!/usr/bin/python

import os, stat, sys, subprocess, linecache

conf_file = open('sender.conf', 'r')
read_it = conf_file.readlines()
parameters = {}
apps = []

for i in read_it:
	if 'file_location' in i and i.find('#') == -1:
		parameters['file_location'] = i.split('"')[1]
for i in read_it:
	if 'server' in i and i.find('#') == -1:
		parameters['server'] = i.split('"')[1]
	elif 'port' in i and i.find('#') == -1:
		parameters['port'] = i.split('"')[1]
	elif 'load_balancer' in i and i.find('#') == -1:
		parameters['lb_port'] = i.split('"')[1]
	elif 'graylog_admin_user' in i and i.find('#') == -1:
		parameters['graylog_admin_user'] = i.split('"')[1]
	elif 'graylog_admin_password' in i and i.find('#') == -1:
		parameters['graylog_admin_password'] = i.split('"')[1]
for i in read_it:
	if 'relayhost' in i and i.find('#') == -1:
		parameters['relayhost'] = i.split('"')[1]
	elif 'email_recipient' in i and i.find('#') == -1:
		parameters['email_recipient'] = i.split('"')[1]
for i in read_it:
	try:
		if 'application' in i and i.find('#') == -1:
			parameters['application'] = i.split('"')[1]
			print parameters['application']
			apps.append(parameters['application'])
			continue
		elif 'log_file' in i and i.find('#') == -1 and os.path.isfile(i.split('"')[1]) == True:
			parameters['log_file'] = i.split('"')[1]

		sender = open('%s/PySender_%s' % (parameters['file_location'], parameters['application']), 'w')
		template = """#!/usr/bin/python

import time, logging, logging.handlers, os, sys, subprocess, select, datetime, re, socket, smtplib, json

# GrayLog parameters
graylog_server = '%s'
graylog_port = %s

# File to read
filename = '%s'

# Server settings
ip_address = socket.gethostbyname(socket.gethostname())
hostname = socket.gethostname()

# Reading file contents
follow = subprocess.Popen(['tail', '-F', filename], stdout = subprocess.PIPE, stderr = subprocess.PIPE)

# Application log
LogDir = \"/var/log/PySender/\"
LogFile = \"/var/log/PySender/%s.log\"  
hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
if os.path.isdir(LogDir) == False:
        subprocess.call('mkdir /var/log/PySender', shell=True)

# Logger
logger = logging.getLogger('PySender')
logger.setLevel(logging.INFO)
handler = logging.handlers.SysLogHandler(address = (graylog_server, graylog_port), socktype=socket.SOCK_STREAM)
formatter = logging.Formatter(hostname + ' - %%(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# Check if tail -F is alive
def tail_alive():
        alive = os.popen(\"ps ax|grep 'tail -F %%s'|egrep -v 'grep|defunct'|wc -l\" %% filename).read()[0]
        if int(alive) == 1:
                return True
        elif int(alive) > 1 or int(alive) < 1:
                log_file = open(LogFile, 'a+')
                log_file.write(hoy + ' - tail - Bad %%s\\n' %% alive)
                log_file.close()
                return False

# Check if FireStart is alive and well
def firestart():
	fire_alive = os.popen(\"ps ax|grep FireStart|egrep -v 'grep|log|defunct'|awk '{print $6}'\").read().replace('\\n', ' ').split()
	if len(fire_alive) >= 1:
		if fire_alive[0].split('/')[-1] == 'FireStart':
			return True
		else:
			log_file = open(LogFile, 'a+')
			log_file.write(hoy + ' - FireStart is really dead - %%s\\n' %% fire_alive[0].split('/')[-1])
			log_file.close()
			return False
	elif len(fire_alive) < 1:
		log_file = open(LogFile, 'a+')
		log_file.write(hoy + ' - FireStart is dead - %%s\\n' %% fire_alive)
		log_file.close()
		return False

# Dealing with multiline log messages
def logmsg():
        content = ''
        while True:
                msg = follow.stdout.readline()
		try:
			if len(msg) > 0 and len(content) <= 109186:
                		#if re.search(r'^[0-9]', msg) and re.search(r'(\d+-\d+-\d+)', msg):
                        	yield content
                        	content = msg
                		#else:
                        	#	content += msg
			elif len(content) > 109186:
				hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
				content = '%%s - Too many characters in string\\n' %% hoy
				continue
			else:
				break
		except Exception,e:
			hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
                        log_file = open(LogFile, 'a+')
                        log_file.write(hoy + ' - logmsg failed - ' + str(e) + '\\n')
                        log_file.close()
			continue
	if len(content) > 0:
        	yield content


while True:
	if tail_alive() == True and firestart() == True:
		try:
			for line in logmsg():
				message = '%s:  ' + str(json.dumps('%%s' %% line).decode('latin-1')) + '\\n' 
				logger.info(message)
		except Exception,e:
			hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
                	log_file = open(LogFile, 'a+')
                        log_file.write(hoy + ' - send failed - ' + str(e) + '\\n')
                        log_file.close()
			continue
	elif tail_alive() == False and firestart() == True:
		follow = subprocess.Popen(['tail','-F',filename],stdout = subprocess.PIPE, stderr = subprocess.PIPE)
		continue
	elif tail_alive() == True and firestart() == False:
		break
	elif tail_alive() == False and firestart() == False:
		break
	
try:
	if firestart() == False:
        	os.popen(\"ps ax|grep 'tail -F %s'|grep -v grep|awk '{print $1}'|xargs kill -9\")
        	os.popen(\"ps ax|grep 'tail -F %s|grep -v SYS'|grep -v 'grep tail'|awk '{print $1}'|xargs kill -9\")
        	os.popen(\"ps ax|grep check_connection|awk '{print $1}'|xargs kill -9\")
        	log_file = open(LogFile, 'a+')
        	log_file.write(hoy + \" - Closed application due to FireStart not running\\n\")
		log_file.close()
        	sys.exit(1)	
except (KeyboardInterrupt, SystemExit):
        os.popen(\"ps ax|grep 'tail -F %s'|grep -v grep|awk '{print $1}'|xargs kill -9\")
        os.popen(\"ps ax|grep 'tail -F %s|grep -v SYS'|grep -v 'grep tail'|awk '{print $1}'|xargs kill -9\")
        #log_file = open(LogFile, 'a+')
        #log_file.write(hoy + \" - Closed by SystemExit\\n\")
	#log_file.close()
        sys.exit(1)
except Exception,e:
        os.popen(\"ps ax|grep 'tail -F %s'|grep -v grep|awk '{print $1}'|xargs kill -9\")
        os.popen(\"ps ax|grep 'tail -F %s|grep -v SYS'|grep -v 'grep tail'|awk '{print $1}'|xargs kill -9\")
        #log_file = open(LogFile, 'a+')
        #log_file.write(hoy + ' - other - ' + str(e) + '\\n')
        #log_file.close()
        sys.exit(1)

""" % (parameters['server'], parameters['port'], parameters['log_file'], parameters['application'], parameters['application'], parameters['log_file'], parameters['log_file'], parameters['log_file'], parameters['log_file'], parameters['log_file'], parameters['log_file'])
	
		sender.write(template)
		sender.close()	
		current_permissions = os.stat('%s/PySender_%s' % (parameters['file_location'], parameters['application']))
        	os.chmod('%s/PySender_%s' % (parameters['file_location'], parameters['application']), current_permissions.st_mode | stat.S_IEXEC)
	except:
		pass

connection_file = open('%s/check_connection' % parameters['file_location'], 'w')	
connection_template = """#!/usr/bin/python

import socket, datetime, os, sys, subprocess

graylog_server = '%s'
port = %s

# Application log
LogDir = \"/var/log/PySender/\"
LogFile = \"/var/log/PySender/check_connection.log\"  
hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
if os.path.isdir(LogDir) == False:
        subprocess.call('mkdir /var/log/PySender', shell=True)

try:
	check_it = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	check_it.connect((graylog_server, port))
	check_it.send('connected to GrayLog')
	packet = check_it.recv(1024)
	check_it.close()
	print 'bad'
	#log_file = open(LogFile, 'a+')
	#log_file.write(hoy + ' GrayLog connection lost!!!\\n')
	#log_file.close()
except Exception,e:
	hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
	print 'bad'
	sys.exit(1)
	log_file = open(LogFile, 'a+')
	log_file.write(hoy + ' - socket - Unable to establish connection with GrayLog - ' + str(e) + '\\n')
	log_file.close() """ % (parameters['server'], parameters['port'])
connection_file.write(connection_template)
connection_file.close()
current_permissions = os.stat('%s/check_connection' % parameters['file_location'])
os.chmod('%s/check_connection' % parameters['file_location'], current_permissions.st_mode | stat.S_IEXEC)

Graylog_Status = open('%s/Graylog_Status' % parameters['file_location'], 'w')
Graylog_template = """#!/usr/bin/python

import os, requests, sys, json

graylog_server = '%s'
load_balancer_port = %s
servers = []
results = []
journal_capacity = []

try:
        response = requests.get('http://%%s:%%s/system/lbstatus' %% (graylog_server, load_balancer_port), timeout = 7, headers={'Connection':'close'})
        if response.content == 'ALIVE':
                try:
                        response = requests.get('http://%%s:%%s/cluster' %% (graylog_server, load_balancer_port), timeout = 7, headers={'Connection':'close'}, auth = ('%s', '%s'))
                        val = json.loads(response.content)
                        for i in val:
                                servers.append(i)
                        for i in range(len(servers)):
                                if val[servers[i]]['is_processing'] == True:
                                        results.append('True')
                                        continue
                                elif val[servers[i]]['is_processing'] == False:
                                        results.append('False')
                                        continue
                        if 'False' in results:
                                print ' - GrayLog not processing '
                                sys.exit(1)
                        else:
                                for i in range(len(servers)):
					try:
                                        	response = requests.get('http://%%s:%%s/cluster/%%s/journal' %% (graylog_server, load_balancer_port, servers[i]), timeout = 7, headers = {'Connection':'close'}, auth = ('%s', '%s'))
                                        	journal_status = json.loads(response.content)
                                        	if (float(journal_status['journal_size'])/float(journal_status['journal_size_limit']))*100 >= 75:
                                                	journal_capacity.append(\"BAD\")
                                        	elif (float(journal_status['journal_size'])/float(journal_status['journal_size_limit']))*100 <= 74:
                                                	journal_capacity.append(\"GOOD\")
					except Exception as e:
						print ' - unable to get journal status - ', e.message
						sys.exit(1)
                                if 'BAD' in journal_capacity:
                                        print ' - journal capacity = ', (float(journal_status['journal_size'])/float(journal_status['journal_size_limit']))*100
                                        sys.exit(1)
                                else:
                                        print True
                                        sys.exit(0)
                except Exception as e:
                        print ' - unable to get response from GrayLog - ', e.message
                        sys.exit(1)
        else:
                print ' - Bad response from GrayLog - ', response.content, ' ', response.status_code
                sys.exit(1)
except Exception as e:
        print ' - unable to get any response from GrayLog - ', e.message
        sys.exit(1)

""" % (parameters['server'], parameters['lb_port'], parameters['graylog_admin_user'], parameters['graylog_admin_password'], parameters['graylog_admin_user'], parameters['graylog_admin_password'])
Graylog_Status.write(Graylog_template)
Graylog_Status.close()
current_permissions = os.stat('%s/Graylog_Status' % parameters['file_location'])
os.chmod('%s/Graylog_Status' % parameters['file_location'], current_permissions.st_mode | stat.S_IEXEC)

start_file = open('%s/FireStart' % parameters['file_location'], 'w')
start_template = """#!/usr/bin/python

import subprocess, os, datetime, time, sys, smtplib, socket, random

## Application log
LogFile = \"/var/log/PySender/FireStart.log\"
if os.path.isdir('/var/log/PySender') == False:
	subprocess.call('mkdir /var/log/PySender', shell=True)

def childProcess():
	senders = %s
	emptiness = os.devnull
	empty_file = open(emptiness, 'w')
	ip_address = socket.gethostbyname(socket.gethostname())
	hostname = socket.gethostname()

	# Establish initial connection to GrayLog
	subprocess.Popen('%s/check_connection')

	# Email Settings
	email_server = smtplib.SMTP('%s')
	email_recipient = '%s'
	email_message = \"Subject: PySender stop sending messages from %%s\\n\\nPySender has stopped sending messages to GrayLog from %%s(%%s)\" %% (hostname, hostname, ip_address) 

	hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')

	def connection_alive():
		is_up = os.popen(\"ps ax|grep check_connection|egrep -v 'grep|defunct'|wc -l\").read()[0]
		if int(is_up) == 1:
			return True
		elif int(is_up) < 1 or int(is_up) > 1:
			#os.popen(\"ps ax|grep check_connection|grep -v grep|awk '{print $1}'|xargs kill -9\")
			return False
		else:
			return False
	
	def GraylogStatus():
		is_up = os.popen('%s/Graylog_Status').read()
		if 'True' in is_up:
			return True
		else:
			hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
			log_file = open(LogFile, 'a+')
			log_file.write(hoy + ' - dead - %%s\\n' %% is_up)
			log_file.close()
			return False

	def processes_alive(process_status):
		process_up = os.popen(\"ps ax|grep %%s|grep python|egrep -v 'grep|<defunct>|vim|less|tail|ps'|awk '{print $6}'\" %% process_status).read().replace('\\n', ' ').split()
		if len(process_up) == 1:
			if process_status == process_up[0].split('/')[-1]:
				return True
			else:
				#log_file = open(LogFile, 'a+')
				#log_file.write(hoy + ' - something is up with the output - %%s process_status differs from %%s process_up\\n' %% (process_status, process_up[0]))
				#log_file.close()
				return False
		elif len(process_up) > 1:
			#os.popen(\"ps ax|grep %%s|awk '{print $1}'|xargs kill\" %% process_status)
			time.sleep(1)
			#log_file = open(LogFile, 'a+')
			#log_file.write(hoy + ' - Multiple processes - %%s\\n' %% process_up)
			#log_file.close()
			return False
		elif len(process_up) < 1:
			#log_file = open(LogFile, 'a+')
			#log_file.write(hoy + ' - Not running - %%s\\n' %% process_up)
			#log_file.close()
			return False

	if connection_alive() == True and GraylogStatus() == True:
		for i in senders:
			subprocess.Popen('%s/PySender_%%s' %% i, stdout=empty_file, stderr=empty_file, shell = True)
	elif connection_alive() == False or GraylogStatus() == False:
        	print '%%s - Tried to establish initial connection on port 1515 and port 12900 but failed - Closing Down :(\\n' %% hoy
		hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
        	log_file = open(LogFile, 'a+')
        	log_file.write('%%s - Tried to establish initial connection on port 1515 and port 12900 but failed - Closing Down :(\\n' %% hoy)
		log_file.close()
		subprocess.call(\"ps ax|grep check_connection|awk '{print $1}'|xargs kill -9\", stderr=empty_file, stdout=empty_file, shell=True)
		subprocess.call(\"ps ax|grep PySender_|grep -v grep|awk '{print $1}'|xargs kill -9\", stderr=empty_file, stdout=empty_file, shell=True)
		subprocess.call(\"ps ax|grep 'tail -F'|grep -v grep|awk '{print $1}'|xargs kill -9\", stderr=empty_file, stdout=empty_file, shell=True)
		subprocess.call(\"ps ax|grep 'Graylog_Status'|grep -v grep|awk '{print $1}'|xargs kill -9\", stderr=empty_file, stdout=empty_file, shell=True)
		sys.exit(1)
	

	Fail2Connect = 0
	BadGraylog = 0

	while Fail2Connect < 7 or BadGraylog < 7:
		process_status = 'PySender_' + random.choice(senders)
		if connection_alive() == True and processes_alive(process_status) == True and GraylogStatus() == True:
			continue
		elif connection_alive() == False and processes_alive(process_status) == True and GraylogStatus() == True and Fail2Connect <= 6:
			Fail2Connect += 1
			subprocess.Popen('%s/check_connection', stderr=empty_file, stdout=empty_file, shell=True)
			time.sleep(1)
			if connection_alive() == True and processes_alive(process_status) == True and GraylogStatus() == True and Fail2Connect <= 6:
				hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
        			log_file = open(LogFile, 'a+')
				log_file.write(\"%%s - is alive %%s\\n\" %% (hoy, process_status))
				log_file.close()
				Fail2Connect = 0
			else:
				Fail2Connect += 1
		elif connection_alive() == True and processes_alive(process_status) == True and GraylogStatus() == False and BadGraylog <= 6:
			BadGraylog += 1
			subprocess.Popen('%s/Graylog_Status', shell=True)
			if connection_alive() == True and processes_alive(process_status) == True and GraylogStatus() == True and BadGraylog <= 6:
				BadGraylog = 0
			else:
				BadGraylog += 1
		elif connection_alive() == True and processes_alive(process_status) == False and GraylogStatus() == True:
			hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
        		log_file = open(LogFile, 'a+')
			log_file.write(\"%%s - Restarting %%s and killing it if was running in funky state\\n\" %% (hoy, process_status))
			log_file.close()
			subprocess.call(\"ps ax|grep %%s|egrep -v 'grep|defunct'|awk '{print $1}'|xargs kill -9\" %% process_status, stderr=empty_file, stdout=empty_file, shell=True)
			subprocess.call(\"ps ax|grep 'tail -F'|grep %%s|grep -v grep|awk '{print $1}'|xargs kill -9\" %% process_status.replace('PySender_', ''), stderr=empty_file, stdout=empty_file, shell=True)
			subprocess.Popen('%s/' + process_status, stdout=empty_file, stderr=empty_file, shell=True)
		elif connection_alive() == False and processes_alive(process_status) == False and GraylogStatus() == False:
			subprocess.Popen('%s/check_connection')
			subprocess.Popen('%s/Graylog_Status')
			time.sleep(3)
			if connection_alive() == True and GraylogStatus() == True:
				Fail2Connect = 0
				BadGraylog = 0
			else:
				BadGraylog += 1
				Fail2Connect += 1
		elif Fail2Connect >= 7 or BadGraylog >= 7:
			hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
        		log_file = open(LogFile, 'a+')
			log_file.write(\"%%s - Unable to connect to GrayLog\\n\" %% hoy)
			log_file.close()
                	break

	try:
        	if Fail2Connect >= 7 or BadGraylog >= 7:
			hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
			subprocess.call(\"ps ax|grep check_connection|awk '{print $1}'|xargs kill -9\", stderr=empty_file, stdout=empty_file, shell=True)
			subprocess.call(\"ps ax|grep PySender_|grep -v grep|awk '{print $1}'|xargs kill -9\", stderr=empty_file, stdout=empty_file, shell=True)
			subprocess.call(\"ps ax|grep 'tail -F'|grep -v grep|awk '{print $1}'|xargs kill -9\", stderr=empty_file, stdout=empty_file, shell=True)
			subprocess.call(\"ps ax|grep 'GraylogStatus'|grep -v grep|awk '{print $1}'|xargs kill -9\", stderr=empty_file, stdout=empty_file, shell=True)
                	print \"%%s - Tried to restablish connection %%s times on port 1515 and %%s times on port 12900 - Closing Down :(\" %% (hoy, Fail2Connect, BadGraylog)
        		log_file = open(LogFile, 'a+')
        		log_file.write('%%s - Tried to restablish connection %%s times on port 1515 and %%s times on port 12900 - Closing Down :(\\n' %% (hoy, Fail2Connect, BadGraylog))
			log_file.close()
			email_server.sendmail(\"PySender@%%s\" %% hostname, email_recipient, email_message)
			email_server.quit()
        		sys.exit(1)
	except (KeyboardInterrupt, SystemExit):
		hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
		subprocess.call(\"ps ax|grep check_connection|awk '{print $1}'|xargs kill -9\", stderr=empty_file, stdout=empty_file, shell=True)
		subprocess.call(\"ps ax|grep PySender_|awk '{print $1}'|xargs kill -9\", stderr=empty_file, stdout=empty_file, shell=True)
		subprocess.call(\"ps ax|grep 'tail -F'|awk '{print $1}'|xargs kill -9\", stderr=empty_file, stdout=empty_file, shell=True)
		subprocess.call(\"ps ax|grep 'GraylogStatus'|grep -v grep|awk '{print $1}'|xargs kill -9\", stderr=empty_file, stdout=empty_file, shell=True)
        	log_file = open(LogFile, 'a+')
        	log_file.write(\"%%s - Closed by SystemExit\\n\" %% hoy)
		log_file.close()
        	sys.exit(1)
	except Exception,e:
		hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
		subprocess.call(\"ps ax|grep check_connection|awk '{print $1}'|xargs kill -9\", stderr=empty_file, stdout=empty_file, shell=True)
		subprocess.call(\"ps ax|grep PySender_|awk '{print $1}'|xargs kill -9\", stderr=empty_file, stdout=empty_file, shell=True)
		subprocess.call(\"ps ax|grep 'tail -F'|awk '{print $1}'|xargs kill -9\", stderr=empty_file, stdout=empty_file, shell=True)
		subprocess.call(\"ps ax|grep 'GraylogStatus'|grep -v grep|awk '{print $1}'|xargs kill -9\", stderr=empty_file, stdout=empty_file, shell=True)
        	log_file = open(LogFile, 'a+')
        	log_file.write(hoy + ' - other - ' + str(e) + '\\n')
        	log_file.close()
        	sys.exit(1)

def ParentProcess():
	newbie = os.fork()
	if newbie == 0:
		childProcess()

try:
	LogFile = \"/var/log/PySender/FireStart.log\"
	is_up = os.popen('ps ax|grep FireStart|grep -v grep|wc -l').read()[0]
	if int(is_up) <= 1 and sys.argv[1] == 'start':
		hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
        	log_file = open(LogFile, 'a+')
        	log_file.write(hoy + ' - started application by user -  \\n')
        	log_file.close()
		ParentProcess()
		sys.exit(0)
	elif int(is_up) >= 2 and sys.argv[1] == 'start':
		subprocess.call('ps ax|grep FireStart|grep -v grep', shell=True)
		print 'Process is already running'
		sys.exit(1)
	elif sys.argv[1] == 'stop':
		hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
        	log_file = open(LogFile, 'a+')
        	log_file.write(hoy + ' - stopped application by user - \\n')
        	log_file.close()
		os.popen(\"ps ax|grep check_connection|egrep -v 'grep'|awk '{print $1}'|xargs kill -9\")
		os.popen(\"ps ax|grep PySender_|egrep -v 'grep'|awk '{print $1}'|xargs kill -9\")
		os.popen(\"ps ax|grep 'tail -F'|egrep -v 'grep'|awk '{print $1}'|xargs kill -9\")
		os.popen(\"ps ax|grep 'FireStart'|egrep -v 'vim|grep'|awk '{print $1}'|xargs kill -9\")
		sys.exit(0)
	else:
		print int(is_up)
		print 'invalid option'
		sys.exit(1)
except IndexError:
	print 'Bad'
	sys.exit(1)
""" % (apps, parameters['file_location'], parameters['relayhost'], parameters['email_recipient'], parameters['file_location'], parameters['file_location'], parameters['file_location'], parameters['file_location'], parameters['file_location'], parameters['file_location'], parameters['file_location'])
start_file.write(start_template)
start_file.close()
current_permissions = os.stat('%s/FireStart' % parameters['file_location'])
os.chmod('%s/FireStart' % parameters['file_location'], current_permissions.st_mode | stat.S_IEXEC)

	
		
	
