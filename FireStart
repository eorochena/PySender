#!/usr/bin/python

import subprocess
import os
import datetime
import time
import sys
import socket
import sender

graylog_input_port = int(sender.graylog_input_port())
graylog_lb_port = int(sender.load_balancer_port())

## Application log
logging_file = "/var/log/pysender/firestart.log"
if os.path.isdir('/var/log/pysender') == False:
    subprocess.call('mkdir /var/log/pysender', shell=True)

emptiness = os.devnull
empty_file = open(emptiness, 'w')
ip_address = socket.gethostbyname(socket.gethostname())
hostname = socket.gethostname()

# Establish initial connection to GrayLog
def check_input():
    log_it = open(logging_file, 'a+')
    log_it.write('started')
    log_it.close()
    input_status = subprocess.Popen('%s/check_connection' % sender.file_location(),
                                    stdout=empty_file, stderr=empty_file, shell=True)
    return input_status


def connection_alive():
    pid = check_input().pid
    is_up = os.popen("ps ax|grep check_connection|grep -w %s|grep -v grep|wc -l"
                     % pid).read().rsplit()[0]
    if int(is_up) == 1:
        print(is_up)
        return True
    elif int(is_up) < 1 or int(is_up) > 1:
        return False
    else:
        return False

def GraylogStatus():
    is_up = os.popen('%s/Graylog_Status' % sender.file_location()).read()
    if 'Alive' in is_up:
        return True
    else:
        today_date = datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d %H:%M:%S')
        log_it = open(logging_file, 'a+')
        log_it.write(today_date + ' - dead - %s\n' % is_up)
        log_it.close()
        return False

def processes_alive():
    process_up = os.popen('ps ax|grep "PySender"|grep -w "%s"|grep -v grep|wc -l' % start().pid
                          ).read().replace('\n', ' ').split()
    process_result = os.popen('ps ax|grep "PySender"|grep -w "%s"|grep -v grep|wc -l' % start().pid
                          ).read()
    if len(process_up) == 1:
        return True
    elif len(process_up) > 1 or len(process_up) < 1:
        today_date = datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d %H:%M:%S')
        log_it = open(logging_file, 'a+')
        log_it.write(today_date + ' - dead - %s - %s\n' % (process_up, process_result))
        log_it.close()
        return False


def start():
    start = subprocess.Popen('%s/PySender.py' % sender.file_location(), stdout=empty_file, stderr=empty_file,
                             shell=True)
    return start

if connection_alive() == True and GraylogStatus() == True:
    start()
elif connection_alive() == False or GraylogStatus() == False:
    today_date = datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d %H:%M:%S')
    print('%s - Tried to establish initial connection on port %s and port %s but failed - Closing Down '
          ':(\n' % (today_date, graylog_input_port, graylog_lb_port))
    log_it = open(logging_file, 'a+')
    log_it.write('%s - Tried to establish initial connection on port %s and port %s but failed - Closing Down '
                 ':(\n' % (today_date, graylog_input_port, graylog_lb_port))
    log_it.close()
    subprocess.call("ps ax|grep check_connection|awk '{print $1}'|xargs kill -9",
                    stderr=empty_file, stdout=empty_file, shell=True)
    subprocess.call("ps ax|grep PySender_|grep -v grep|awk '{print $1}'|xargs kill -9",
                    stderr=empty_file, stdout=empty_file, shell=True)
    subprocess.call("ps ax|grep 'tail -F'|grep -v grep|awk '{print $1}'|xargs kill -9",
                    stderr=empty_file, stdout=empty_file, shell=True)
    subprocess.call("ps ax|grep 'Graylog_Status'|grep -v grep|awk '{print $1}'|xargs kill -9",
                    stderr=empty_file, stdout=empty_file, shell=True)
    sys.exit(1)


Fail2Connect = 0
BadGraylog = 0

while Fail2Connect < 7 or BadGraylog < 7:
    print('loop')
    if connection_alive() == True and processes_alive() == True and GraylogStatus() == True:
        print('good')
        continue
    elif connection_alive() == False and processes_alive() == True and GraylogStatus() == True and Fail2Connect <= 6:
        print('bad 1')
        Fail2Connect += 1
        today_date = datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d %H:%M:%S')
        log_it = open(logging_file, 'a+')
        log_it.write('connection alive - False')
        log_it.close()
        check_input()
        time.sleep(1)
        if connection_alive() == True and processes_alive() == True and GraylogStatus() == True and Fail2Connect <= 6:
            today_date = datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d %H:%M:%S')
            log_it = open(logging_file, 'a+')
            log_it.write("%s - is alive \n" % today_date)
            log_it.close()
            Fail2Connect = 0
        else:
            print('bad 1 - 2')
            Fail2Connect += 1
    elif connection_alive() == True and processes_alive() == True and GraylogStatus() == False and BadGraylog <= 6:
        BadGraylog += 1
        print('bad 2')
        subprocess.Popen('%s/Graylog_Status' % sender.file_location(), shell=True)
        if connection_alive() == True and processes_alive() == True and GraylogStatus() == True and BadGraylog <= 6:
            BadGraylog = 0
        else:
            BadGraylog += 1
    elif connection_alive() == True and processes_alive() == False and GraylogStatus() == True:
        print('bad 3')
        today_date = datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d %H:%M:%S')
        log_it = open(logging_file, 'a+')
        log_it.write("%s - Restarting and killing it if was running in funky state\n" % today_date)
        log_it.close()
        #subprocess.call("ps ax|grep PySender.py|egrep -v 'grep|defunct'|awk '{print $1}'|xargs kill -9",
         #               stderr=empty_file, stdout=empty_file, shell=True)
        #subprocess.call("ps ax|grep 'tail -F'|grep PySender.py|grep -v grep|awk '{print $1}'|xargs kill -9"
         #               , stderr=empty_file, stdout=empty_file, shell=True)
        #subprocess.Popen('%s/PySender.py' % sender.file_location(), stdout=empty_file, stderr=empty_file, shell=True)
    elif connection_alive() == False and processes_alive() == False and GraylogStatus() == False:
        print('bad 4')
        check_input()
        subprocess.Popen('/%s/Graylog_Status' % sender.file_location())
        time.sleep(3)
        if connection_alive() == True and GraylogStatus() == True:
            Fail2Connect = 0
            BadGraylog = 0
        else:
            BadGraylog += 1
            Fail2Connect += 1
    elif Fail2Connect >= 7 or BadGraylog >= 7:
        print('bad 5')
        today_date = datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d %H:%M:%S')
        log_it = open(logging_file, 'a+')
        log_it.write("%s - Unable to connect to GrayLog\n" % today_date)
        log_it.close()
        break
    else:
        print('bad 6')
        break

try:
    if Fail2Connect >= 7 or BadGraylog >= 7:
        today_date = datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d %H:%M:%S')
        subprocess.call("ps ax|grep check_connection|awk '{print $1}'|xargs kill -9",
                        stderr=empty_file, stdout=empty_file, shell=True)
        subprocess.call("ps ax|grep PySender_|grep -v grep|awk '{print $1}'|xargs kill -9",
                        stderr=empty_file, stdout=empty_file, shell=True)
        subprocess.call("ps ax|grep 'tail -F'|grep -v grep|awk '{print $1}'|xargs kill -9",
                        stderr=empty_file, stdout=empty_file, shell=True)
        subprocess.call("ps ax|grep 'GraylogStatus'|grep -v grep|awk '{print $1}'|xargs kill -9",
                        stderr=empty_file, stdout=empty_file, shell=True)
        print "%s - Tried to restablish connection %s times on port %s and %s times on port %s - Closing Down :("\
              % (today_date, Fail2Connect, graylog_input_port, BadGraylog, graylog_lb_port)
        log_it = open(logging_file, 'a+')
        log_it.write('%s - Tried to restablish connection %s times on port %s and %s times on port %s - Closing Down '
                     ':(\n' % (today_date, Fail2Connect, graylog_input_port, BadGraylog, graylog_lb_port))
        log_it.close()
        sys.exit(1)
except Exception,e:
    hoy = datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d %H:%M:%S')
    subprocess.call("ps ax|grep check_connection|awk '{print $1}'|xargs kill -9",
                    stderr=empty_file, stdout=empty_file, shell=True)
    subprocess.call("ps ax|grep PySender_|awk '{print $1}'|xargs kill -9",
                    stderr=empty_file, stdout=empty_file, shell=True)
    subprocess.call("ps ax|grep 'tail -F'|awk '{print $1}'|xargs kill -9",
                    stderr=empty_file, stdout=empty_file, shell=True)
    subprocess.call("ps ax|grep 'GraylogStatus'|grep -v grep|awk '{print $1}'|xargs kill -9",
                    stderr=empty_file, stdout=empty_file, shell=True)
    log_file = open(LogFile, 'a+')
    log_file.write(hoy + ' - other - ' + str(e) + '\n')
    log_file.close()
    sys.exit(1)

