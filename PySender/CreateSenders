#!/usr/bin/python

import os, stat, sys, subprocess

conf_file = open('../sender.conf', 'r')
read_it = conf_file.readlines()
parameters = {}
apps = []

for i in read_it:
	if 'file_location' in i and i.find('#') == -1:
		parameters['file_location'] = i.split('"')[1] + '/PySender'
		if os.path.isdir(parameters['file_location']) == False:
        		subprocess.call('mkdir %s/PySender' % parameters['file_location'], shell=True)
for i in read_it:
	if 'server' in i and i.find('#') == -1:
		parameters['server'] = i.split('"')[1]
	elif 'port' in i and i.find('#') == -1:
		parameters['port'] = i.split('"')[1]
	elif 'load_balancer' in i and i.find('#') == -1:
		parameters['lb_port'] = i.split('"')[1]
for i in read_it:
	if 'relayhost' in i and i.find('#') == -1:
		parameters['relayhost'] = i.split('"')[1]
	elif 'email_recipient' in i and i.find('#') == -1:
		parameters['email_recipient'] = i.split('"')[1]
for i in read_it:
	if 'application' in i and i.find('#') == -1:
		parameters['application'] = i.split('"')[1]
		apps.append(parameters['application'])
		continue
	elif 'log_file' in i and i.find('#') == -1 and os.path.isfile(i.split('"')[1]) == True:
		parameters['log_file'] = i.split('"')[1]
	elif 'log_file' in i and i.find('#') == -1 and os.path.isfile(i.split('"')[1]) == False:	
		print parameters['log_file'], " doesn't exists, skipping"
		del parameters['application']
		del parameters['log_file']
		pass
	else:
		continue

	sender = open('%s/PySender_%s' % (parameters['file_location'], parameters['application']), 'w')
	template = """#!/usr/bin/python

import time, logging, os, sys, subprocess, select, datetime, re, socket, smtplib
from pygelf import GelfTcpHandler, GelfUdpHandler, GelfTlsHandler

# GrayLog parameters
graylog_server = '%s'
graylog_port = %s

# File to read
filename = '%s'

# Server settings
ip_address = socket.gethostbyname(socket.gethostname())
hostname = socket.gethostname()

# Reading file contents
follow = subprocess.Popen(['tail', '-F', filename, '|', 'grep', '-v', 'SYS'], stdout = subprocess.PIPE, stderr = subprocess.PIPE)
#polling = select.poll()
#polling.register(follow.stdout)

# pygelf and logging parameters
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger()
logger.addHandler(GelfTcpHandler(host=graylog_server, port=graylog_port, _app_name='%s', _ip_address=ip_address, _hostname=hostname, compress=False))

# Application log
LogDir = \"/var/log/PySender/\"
LogFile = \"/var/log/PySender/%s.log\"  
hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
if os.path.isdir(LogDir) == False:
        subprocess.call('mkdir /var/log/PySender', shell=True)

# Email Settings
email_server = smtplib.SMTP('%s', 25)
email_recipient = '%s'
email_message = \"Subject: PySender stop sending messages from %%s\\n\\nPySender has stopped sending messages to GrayLog from %%s(%%s) because FireStart is not running\" %% (hostname, hostname, ip_address) 

# Check if tail -F is alive
def tail_alive():
        alive = os.popen(\"ps ax|grep 'tail -F %%s'|grep -v grep|wc -l\" %% filename).read()[0]
        if int(alive) == 1:
                return True
        elif int(alive) > 1 or int(alive) < 1:
              #  log_file = open(LogFile, 'a+')
              #  log_file.write(hoy + ' - tail - Bad %%s\\n' %% alive)
              #  log_file.close()
                return False

# Check if FireStart is alive and well
def firestart():
	fire_alive = os.popen(\"ps ax|grep FireStart|egrep -v 'grep|log|defunct'|awk '{print $6}'\").read().replace('\\n', ' ').split()
	if len(fire_alive) >= 1:
		if fire_alive[0].split('/')[-1] == 'FireStart':
			return True
		else:
			#log_file = open(LogFile, 'a+')
			#log_file.write(hoy + ' - FireStart is really dead - %%s\\n' %% fire_alive[0].split('/')[-1])
			#log_file.close()
			return False
	elif len(fire_alive) < 1:
		#log_file = open(LogFile, 'a+')
		#log_file.write(hoy + ' - FireStart is dead - %%s\\n' %% fire_alive)
		#log_file.close()
		return False

# Dealing with multiline log messages
def logmsg():
        content = ''
        while True:
                msg = follow.stdout.readline()
                if re.search(r'(\d+:\d+:\d+)', msg):
                        yield content
                        content = msg
                else:
                        content += msg
        yield content


while True:
	if tail_alive() == True and firestart() == True:
		try:
			for line in logmsg():
				logging.info(line)
		except Exception,e:
                	log_file = open(LogFile, 'a+')
                        log_file.write(hoy + ' - send failed - ' + str(e) + '\\n')
                        log_file.close()
			print \"close\"
		continue
	elif tail_alive() == False and firestart() == True:
		follow = subprocess.Popen(['tail','-F',filename],stdout = subprocess.PIPE, stderr = subprocess.PIPE)
		continue
	elif tail_alive() == True and firestart() == False:
		break
	
try:
	if firestart() == False:
        	os.popen(\"ps ax|grep 'tail -F %s'|awk '{print $1}'|xargs kill -9\")
        	os.popen(\"ps ax|grep check_connection|awk '{print $1}'|xargs kill -9\")
        	#log_file = open(LogFile, 'a+')
        	#log_file.write(hoy + \" - Closed application due to FireStart not running\\n\")
		email_server.sendmail(\"PySender@%%s\" %% hostname, email_recipient, email_message)
        	sys.exit(1)	
except (KeyboardInterrupt, SystemExit):
        os.popen(\"ps ax|grep 'tail -F %s'|awk '{print $1}'|xargs kill -9\")
        #log_file = open(LogFile, 'a+')
        #log_file.write(hoy + \" - Closed by SystemExit\\n\")
        sys.exit(1)
except Exception,e:
        os.popen(\"ps ax|grep 'tail -F %s'|awk '{print $1}'|xargs kill -9\")
        #log_file = open(LogFile, 'a+')
        #log_file.write(hoy + ' - other - ' + str(e) + '\\n')
        #log_file.close()
        sys.exit(1)

""" % (parameters['server'], parameters['port'], parameters['log_file'], parameters['application'], parameters['application'], parameters['relayhost'], parameters['email_recipient'], parameters['log_file'], parameters['log_file'], parameters['log_file'])
	
	sender.write(template)
	sender.close()	
	current_permissions = os.stat('%s/PySender_%s' % (parameters['file_location'], parameters['application']))
        os.chmod('%s/PySender_%s' % (parameters['file_location'], parameters['application']), current_permissions.st_mode | stat.S_IEXEC)


connection_file = open('%s/check_connection' % parameters['file_location'], 'w')	
connection_template = """#!/usr/bin/python

import socket, datetime, os

graylog_server = '%s'
port = %s

# Application log
LogDir = \"/var/log/PySender/\"
LogFile = \"/var/log/PySender/check_connection.log\"  
hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
if os.path.isdir(LogDir) == False:
        subprocess.call('mkdir /var/log/PySender', shell=True)

try:
	check_it = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	check_it.connect((graylog_server, port))
	check_it.send('connected to GrayLog')
	packet = check_it.recv(1024)
	check_it.close()
	#log_file = open(LogFile, 'a+')
	#log_file.write(hoy + ' GrayLog connection lost!!!\\n')
	#log_file.close()
except Exception,e:
	print "Bye"
	#log_file = open(LogFile, 'a+')
	#log_file.write(hoy + ' - socket - Unable to establish connection with GrayLog - ' + str(e) + '\\n')
	#log_file.close() """ % (parameters['server'], parameters['port'])
connection_file.write(connection_template)
connection_file.close()
current_permissions = os.stat('%s/check_connection' % parameters['file_location'])
os.chmod('%s/check_connection' % parameters['file_location'], current_permissions.st_mode | stat.S_IEXEC)

LB_Status = open('%s/LB_Status' % parameters['file_location'], 'w')
LB_template = """#!/usr/bin/python

import os, requests, sys

graylog_server = '%s'
load_balancer_port = %s
try:
	response = requests.get('http://%%s:%%s/system/lbstatus' %% (graylog_server, load_balancer_port), timeout = 1, headers={'Connection':'close'})

	if response.content == 'ALIVE':
		print response.content
		sys.exit(0)
	else:
		print response.content, ' ', response.status_code
		sys.exit(1)
except requests.exceptions.RequestException as e:
	print e
	sys.exit(1)
""" % (parameters['server'], parameters['lb_port'])
LB_Status.write(LB_template)
LB_Status.close()
current_permissions = os.stat('%s/LB_Status' % parameters['file_location'])
os.chmod('%s/LB_Status' % parameters['file_location'], current_permissions.st_mode | stat.S_IEXEC)

start_file = open('%s/FireStart' % parameters['file_location'], 'w')
start_template = """#!/usr/bin/python

import subprocess, os, datetime, time, sys, smtplib, socket, random

def childProcess():
	senders = %s
	emptiness = os.devnull
	empty_file = open(emptiness, 'w')
	ip_address = socket.gethostbyname(socket.gethostname())
	hostname = socket.gethostname()

	# Establish initial connection to GrayLog
	subprocess.Popen('%s/check_connection')

	# Email Settings
	email_server = smtplib.SMTP('%s', 25)
	email_recipient = '%s'
	email_message = \"Subject: PySender stop sending messages from %%s\\n\\nPySender has stopped sending messages to GrayLog from %%s(%%s)\" %% (hostname, hostname, ip_address) 

	## Application log
	LogFile = \"/var/log/PySender/FireStart.log\"
	hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
	if os.path.isdir(\"/var/log/PySender\") == False:
		subprocess.call('mkdir /var/log/PySender', shell=True)

	def connection_alive():
		is_up = os.popen('ps ax|grep check_connection|grep -v grep|wc -l').read()[0]
		if int(is_up) == 1:
			return True
		elif int(is_up) > 1 or int(is_up) < 1:
			os.popen(\"ps ax|grep check_connection|awk '{print $1}'|xargs kill\")
			return False
		else:
			return False

	def LB_Status():
		is_up = os.popen('%s/LB_Status').read()
		if 'ALIVE' in is_up:
			return True
		else:
			log_file = open(LogFile, 'a+')
			log_file.write(hoy + ' - dead - %%s\\n' %% is_up)
			log_file.close()
			return False

	def processes_alive(process_status):
		process_up = os.popen(\"ps ax|grep %%s|egrep -v 'grep|<defunct>'|awk '{print $6}'\" %% process_status).read().replace('\\n', ' ').split()
		if len(process_up) == 1:
			if process_status == process_up[0].split('/')[-1]:
				return True
			else:
				#log_file = open(LogFile, 'a+')
				#log_file.write(hoy + ' - something is up with the output - %%s process_status differs from %%s process_up\\n' %% (process_status, process_up[0]))
				#log_file.close()
				return False
		elif len(process_up) > 1:
			#os.popen(\"ps ax|grep %%s|awk '{print $1}'|xargs kill\" %% process_status)
			time.sleep(1)
			#log_file = open(LogFile, 'a+')
			#log_file.write(hoy + ' - Multiple processes - %%s\\n' %% process_up)
			#log_file.close()
			return False
		elif len(process_up) < 1:
			#log_file = open(LogFile, 'a+')
			#log_file.write(hoy + ' - Not running - %%s\\n' %% process_up)
			#log_file.close()
			return False

	if connection_alive() == True and LB_Status() == True:
		for i in senders:
			subprocess.Popen('%s/PySender_'+i, stdout=empty_file, stderr=empty_file)
	elif connection_alive() == False or LB_Status() == False:
		os.popen(\"ps ax|grep PySender_|grep -v grep|awk '{print $1}'|xargs kill\")
		os.popen(\"ps ax|grep 'tail -F'|grep -v grep|awk '{print $1}'|xargs kill\")
		os.popen(\"ps ax|grep LB_Status|grep -v grep|awk '{print $1}'|xargs kill\")
		sys.exit(1)
	

	Fail2Connect = 0
	BadLB = 0

	while Fail2Connect < 5 or BadLB < 3:
		process_status = 'PySender_' + random.choice(senders)
		if connection_alive() == True and LB_Status() == True and processes_alive(process_status) == True:
			continue
		elif connection_alive() == False and LB_Status() == True and processes_alive(process_status) == True:
			Fail2Connect += 1
			subprocess.Popen('%s/check_connection')
			time.sleep(1)
			if connection_alive() == True and LB_Status() == True and processes_alive(process_status) == True and Fail2Connect <= 4:
				Fail2Connect = 0
			else:
				Fail2Connect += 1
		elif connection_alive() == True and LB_Status() == False and processes_alive(process_status) == True:
			Fail2Connect += 1
			subprocess.Popen('%s/LB_Status')
			if connection_alive() == True and LB_Status() == True and processes_alive(process_status) == True and Fail2Connect <= 4 and BadLB <= 2:
				continue
			else:
				BadLB += 1
				Fail2Connect += 1
		elif connection_alive() == True and LB_Status() == True and processes_alive(process_status) == False:
        		log_file = open(LogFile, 'a+')
			log_file.write(\"%%s - Restarting PySender %%s\\n\" %% (hoy, process_status))
			log_file.close()
			#subprocess.Popen('./' + process_status, stdout=empty_file, stderr=empty_file)
		elif connection_alive() == False and LB_Status() == False and processes_alive(process_status) == False:
			subprocess.Popen('%s/check_connection')
			subprocess.Popen('%s/LB_Status')
			if connection_alive() == True and LB_Status() == True:
				Fail2Connect = 0
			else:
				BadLB += 1
				Fail2Conect += 1
		elif Fail2Connect >= 5 or BadLB >= 3:
        		#log_file = open(LogFile, 'a+')
			#log_file.write(\"%%s - Unable to connect to GrayLog\\n\" %% hoy)
			#log_file.close()
                	break

	try:
        	if Fail2Connect >= 5 or BadLB >= 3:
			os.popen(\"ps ax|grep PySender_|grep -v grep|awk '{print $1}'|xargs kill\")
			os.popen(\"ps ax|grep LB_Status|grep -v grep|awk '{print $1}'|xargs kill\")
			os.popen(\"ps ax|grep 'tail -F'|grep -v grep|awk '{print $1}'|xargs kill\")
                	print \"%%s - Tried to restablish connection %%s times - Closing Down :(\" %% (hoy, Fail2Connect)
        		#log_file = open(LogFile, 'a+')
        		#log_file.write(\"%%s - Tried to restablish connection %%s times - Closing Down :(\\n\" %% hoy)
			#log_file.close()
			email_server.sendmail(\"PySender@%%s\" %% hostname, email_recipient, email_message)
        		sys.exit(1)
	except (KeyboardInterrupt, SystemExit):
		os.popen(\"ps ax|grep check_connection|awk '{print $1}'|xargs kill\")
		os.popen(\"ps ax|grep LB_Status|grep -v grep|awk '{print $1}'|xargs kill\")
		os.popen(\"ps ax|grep PySender_|awk '{print $1}'|xargs kill\")
		os.popen(\"ps ax|grep 'tail -F'|awk '{print $1}'|xargs kill\")
        	#log_file = open(LogFile, 'a+')
        	#log_file.write(\"%%s - Closed by SystemExit\\n\" %% hoy)
		#log_file.close()
		email_server.sendmail(\"PySender@%%s\" %% hostname, email_recipient, email_message)
        	sys.exit(1)
	except Exception,e:
		os.popen(\"ps ax|grep check_connection|awk '{print $1}'|xargs kill\")
		os.popen(\"ps ax|grep PySender_|awk '{print $1}'|xargs kill\")
		os.popen(\"ps ax|grep LB_Status|grep -v grep|awk '{print $1}'|xargs kill\")
		os.popen(\"ps ax|grep 'tail -F'|awk '{print $1}'|xargs kill\")
        	#log_file = open(LogFile, 'a+')
        	#log_file.write(hoy + ' - other - ' + str(e) + '\\n')
        	#log_file.close()
		email_server.sendmail(\"PySender@%%s\" %% hostname, email_recipient, email_message)
        	sys.exit(1)

def ParentProcess():
	newbie = os.fork()
	if newbie == 0:
		childProcess()

try:
	if sys.argv[1] == 'start':
		ParentProcess()
	elif sys.argv[1] == 'stop':
		os.popen(\"ps ax|grep check_connection|egrep -v 'grep'|awk '{print $1}'|xargs kill\")
		os.popen(\"ps ax|grep PySender_|egrep -v 'grep'|awk '{print $1}'|xargs kill\")
		os.popen(\"ps ax|grep LB_Status|egrep -v 'grep'|awk '{print $1}'|xargs kill\")
		os.popen(\"ps ax|grep 'tail -F'|egrep -v 'grep'|awk '{print $1}'|xargs kill\")
		os.popen(\"ps ax|grep 'FireStart'|egrep -v 'vim|grep'|awk '{print $1}'|xargs kill\")
		sys.exit(0)
	else:
		print 'invalid option'
		sys.exit(1)
except IndexError:
	print 'Bad'
	sys.exit(1)
""" % (apps, parameters['file_location'], parameters['relayhost'], parameters['email_recipient'], parameters['file_location'], parameters['file_location'], parameters['file_location'], parameters['file_location'], parameters['file_location'], parameters['file_location'])
start_file.write(start_template)
start_file.close()
current_permissions = os.stat('%s/FireStart' % parameters['file_location'])
os.chmod('%s/FireStart' % parameters['file_location'], current_permissions.st_mode | stat.S_IEXEC)

	
		
	
