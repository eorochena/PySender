#!/usr/bin/python

import os, stat

conf_file = open('../sender.conf', 'r')
read_it = conf_file.readlines()
parameters = {}
apps = []
for i in read_it:
	if 'server' in i:
		parameters['server'] = i.split('"')[1]
	elif 'port' in i:
		parameters['port'] = i.split('"')[1]
for i in read_it:
	if 'relayhost' in i:
		parameters['relayhost'] = i.split('"')[1]
	elif 'email_recipient' in i:
		parameters['email_recipient'] = i.split('"')[1]
for i in read_it:
	if 'application' in i:
		parameters['application'] = i.split('"')[1]
		apps.append(parameters['application'])
		continue
	elif 'log_file' in i:
		parameters['log_file'] = i.split('"')[1]
	else:
		continue

	sender = open('PySender_%s' % parameters['application'], 'w')
	template = """#!/usr/bin/python

import time, logging, os, sys, subprocess, select, datetime, re, socket, smtplib
from pygelf import GelfTcpHandler, GelfUdpHandler, GelfTlsHandler

# GrayLog parameters
graylog_server = '%s'
graylog_port = %s

# File to read
filename = '%s'

# Server settings
ip_address = socket.gethostbyname(socket.gethostname())
hostname = socket.gethostname()

# Reading file contents
follow = subprocess.Popen(['tail', '-F', filename, '|', 'grep', '-v', 'SYS'], stdout = subprocess.PIPE, stderr = subprocess.PIPE)
polling = select.poll()
polling.register(follow.stdout)

# pygelf and logging parameters
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger()
logger.addHandler(GelfTcpHandler(host=graylog_server, port=graylog_port, _app_name='%s', _ip_address=ip_address, _hostname=hostname, compress=False))

# Application log
LogDir = \"/var/log/PySender/\"
LogFile = \"/var/log/PySender/%s.log\"  
hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
if os.path.isdir(LogDir) == False:
        subprocess.call('mkdir /var/log/PySender', shell=True)


# Email Settings
email_server = smtplib.SMTP('%s', 25)
email_recipient = '%s'
email_message = \"Subject: PySender stop sending messages from %%s\\n\\nPySender has stopped sending messages to GrayLog from %%s(%%s) because FireStart is not running\" %% (hostname, hostname, ip_address) 

# Check if tail -F is alive
def tail_alive():
        alive = os.popen(\"ps ax|grep 'tail -F %%s'|grep -v grep|wc -l\" %% filename).read()[0]
        if int(alive) == 1:
                return True
        elif int(alive) > 1 or int(alive) < 1:
                log_file = open(LogFile, '+a')
                log_file.write(hoy + ' - tail - Bad %%s\\n' %% alive)
                log_file.close()
                return False

# Check if FireStart is alive and well
def firestart():
	fire_alive = os.popen(\"ps ax|grep FireStart|grep -v grep|wc -l\").readline().replace('\\n', '')
	if int(fire_alive) == 1:
		return True
	elif int(fire_alive) > 1 or int(fire_alive) < 1:
		log_file = open(LogFile, '+a')
		log_file.write(hoy + ' - FireStart is dead - %%s\\n' %% fire_alive)
		log_file.close()
		return False

# Dealing with multiline log messages
def logmsg():
        content = ''
        while tail_alive() == True and firestart() == True:
                msg = follow.stdout.readline()
                if re.search(r'(\d+:\d+:\d+)', msg):
                        yield content
                        content = msg
                else:
                        content += msg
        yield content


while firestart() == True:
	if tail_alive() == True:
		try:
			if polling.poll(0.1):
				for line in logmsg():
					message = '%%s - %%s' %% ('%s', line)
					logging.info(message)
			time.sleep(0.1)
		except Exception,e:
                        log_file = open(LogFile, '+a')
                        log_file.write(hoy + ' - send failed - ' + str(e) + '\\n')
                        log_file.close()
		continue
	elif tail_alive() == False:
		follow = subprocess.Popen(['tail','-F',filename],stdout = subprocess.PIPE, stderr = subprocess.PIPE)
		polling = select.poll()
		polling.register(follow.stdout)
		continue
try:
	if firestart() == False:
        	os.popen(\"ps ax|grep 'tail -F %s'|awk '{print $1}'|xargs kill -9\")
        	os.popen(\"ps ax|grep check_connection|awk '{print $1}'|xargs kill -9\")
        	log_file = open(LogFile, '+a')
        	log_file.write(hoy + \" - Closed application due to FireStart not running\\n\")
		email_server.sendmail(\"PySender@%%s\" %% hostname, email_recipient, email_message)
        	sys.exit(1)	
except (KeyboardInterrupt, SystemExit):
        os.popen(\"ps ax|grep 'tail -F %s'|awk '{print $1}'|xargs kill -9\")
        log_file = open(LogFile, '+a')
        log_file.write(hoy + \" - Closed by SystemExit\\n\")
        sys.exit(1)
except Exception,e:
        os.popen(\"ps ax|grep 'tail -F %s'|awk '{print $1}'|xargs kill -9\")
        log_file = open(LogFile, '+a')
        log_file.write(hoy + ' - other - ' + str(e) + '\\n')
        log_file.close()
        sys.exit(1)

""" % (parameters['server'], parameters['port'], parameters['log_file'], parameters['application'], parameters['application'], parameters['relayhost'], parameters['email_recipient'], parameters['application'], parameters['log_file'], parameters['log_file'], parameters['log_file'])
	
	sender.write(template)
	sender.close()	
	current_permissions = os.stat('PySender_%s' % parameters['application'])
        os.chmod('PySender_%s' % parameters['application'], current_permissions.st_mode | stat.S_IEXEC)


connection_file = open('check_connection', 'w')	
connection_template = """#!/usr/bin/python

import socket, datetime, os

graylog_server = '%s'
port = %s

# Application log
LogDir = \"/var/log/PySender/\"
LogFile = \"/var/log/PySender/check_connection.log\"  
hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
if os.path.isdir(LogDir) == False:
        subprocess.call('mkdir /var/log/PySender', shell=True)

try:
	check_it = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	check_it.connect((graylog_server, port))
	check_it.send('connected to GrayLog')
	packet = check_it.recv(1024)
	check_it.close()
	log_file = open(LogFile, '+a')
	log_file.write(hoy + ' GrayLog connection lost!!!\\n')
	log_file.close()
except Exception,e:
	log_file = open(LogFile, '+a')
	log_file.write(hoy + ' - socket - Unable to establish connection with GrayLog - ' + str(e) + '\\n')
	log_file.close() """ % (parameters['server'], parameters['port'])
connection_file.write(connection_template)
connection_file.close()
current_permissions = os.stat('check_connection')
os.chmod('check_connection', current_permissions.st_mode | stat.S_IEXEC)


start_file = open('FireStart', 'w')
start_template = """#!/usr/bin/python

import subprocess, os, datetime, time, sys, smtplib, socket, random

senders = %s
emptiness = os.devnull
empty_file = open(emptiness, 'w')
subprocess.Popen('./check_connection')
ip_address = socket.gethostbyname(socket.gethostname())
hostname = socket.gethostname()

# Email Settings
email_server = smtplib.SMTP('%s', 25)
email_recipient = '%s'
email_message = \"Subject: PySender stop sending messages from %%s\\n\\nPySender has stopped sending messages to GrayLog from %%s(%%s)\" %% (hostname, hostname, ip_address) 

# Application log
LogFile = \"/var/log/PySender/FireStart.log\"
hoy = datetime.datetime.strftime(datetime.datetime.now(), '%%Y-%%m-%%d %%H:%%M:%%S')
if os.path.isdir("/var/log/PySender") == False:
	subprocess.call('mkdir /var/log/PySender', shell=True)

def connection_alive():
	is_up = os.popen('ps ax|grep check_connection|grep -v grep|wc -l').read()[0]
	if int(is_up) == 1:
		return True
	elif int(is_up) > 1 or int(is_up) < 1:
		os.popen(\"ps ax|grep check_connection|awk '{print $1}'|xargs kill\")
		log_file = open(LogFile, '+a')
		log_file.write(hoy + ' connection from starter - %%s\\n' %% is_up)
		log_file.close()
		return False
	else:
		return False

def processes_alive(process_status):
	process_up = os.popen('ps ax|grep %%s|egrep -v \"grep|defunct\"|wc -l' %% process_status).readline().replace('\\n', '')
	if int(process_up) == 1:
		return True
	elif int(process_up) > 1 or int(process_up) < 1:
		log_file = open(LogFile, '+a')
		log_file.write(hoy + ' - process from starter - %%s\\n' %% process_up)
		log_file.close()
		return False
time.sleep(3)
if connection_alive() == True:
	for i in senders:
		subprocess.Popen('./PySender_'+i, stdout=empty_file, stderr=empty_file)
elif connection_alive() == False:
	os.popen(\"ps ax|grep PySender_|awk '{print $1}'|xargs kill\")
	os.popen(\"ps ax|grep 'tail -F'|awk '{print $1}'|xargs kill\")
	log_file = open(LogFile, '+a')
	log_file.write(hoy + ' - Unable to establish initial connection with GrayLog\\n')
	log_file.close()
	sys.exit(1)
	

Fail2Connect = 0

while Fail2Connect < 5:
	process_status = 'PySender_' + random.choice(senders)
	if connection_alive() == True and processes_alive(process_status) == True and Fail2Connect < 5:
		continue
	elif connection_alive() == False and processes_alive(process_status) == True and Fail2Connect < 5:
		Fail2Connect += 1
		subprocess.Popen('./check_connection')
		time.sleep(1)
		if connection_alive() == True and processes_alive(process_status) == True and Fail2Connect <= 4:
			Fail2Connect = 0
		else:
			Fail2Connect += 1
	elif connection_alive() == True and processes_alive(process_status) == False and Fail2Connect < 5:
        	log_file = open(LogFile, '+a')
		log_file.write(\"%%s - Restarting PySender %%s\\n\" %% (hoy, process_status))
		log_file.close()
		subprocess.Popen('./' + process_status, stdout=empty_file, stderr=empty_file)
	elif connection_alive() == False and processes_alive(process_status) == False and Fail2Connect < 5:
		subprocess.Popen('./check_connection')
		time.sleep(1)
		if connection_alive() == True:
			Fail2Connect = 0
		else:
			Fail2Connect += 1
	elif Fail2Connect == 5:
        	log_file = open(LogFile, '+a')
		log_file.write(\"%%s - Unable to connect to GrayLog\\n\" %% hoy)
		log_file.close()
                break

try:
        if Fail2Connect >= 5:
		os.popen(\"ps ax|grep PySender_|awk '{print $1}'|xargs kill\")
		os.popen(\"ps ax|grep 'tail -F'|awk '{print $1}'|xargs kill\")
                print \"%%s - Tried to restablish connection %%s times - Closing Down :(\" %% (hoy, Fail2Connect)
        	log_file = open(LogFile, '+a')
        	log_file.write(\"%%s - Tried to restablish connection %%s times - Closing Down :(\\n\" %% hoy)
		email_server.sendmail(\"PySender@%%s\" %% hostname, email_recipient, email_message)
        	sys.exit(1)
except (KeyboardInterrupt, SystemExit):
	os.popen(\"ps ax|grep check_connection|awk '{print $1}'|xargs kill\")
	os.popen(\"ps ax|grep PySender_|awk '{print $1}'|xargs kill\")
	os.popen(\"ps ax|grep 'tail -F'|awk '{print $1}'|xargs kill\")
        log_file = open(LogFile, '+a')
        log_file.write(\"%%s - Closed by SystemExit\\n\" %% hoy)
	email_server.sendmail(\"PySender@%%s\" %% hostname, email_recipient, email_message)
        sys.exit(1)
except Exception,e:
	os.popen(\"ps ax|grep check_connection|awk '{print $1}'|xargs kill\")
	os.popen(\"ps ax|grep PySender_|awk '{print $1}'|xargs kill\")
	os.popen(\"ps ax|grep 'tail -F'|awk '{print $1}'|xargs kill\")
        log_file = open(LogFile, '+a')
        log_file.write(hoy + ' - other - ' + str(e) + '\\n')
        log_file.close()
	email_server.sendmail(\"PySender@%%s\" %% hostname, email_recipient, email_message)
        sys.exit(1)
""" % (apps, parameters['relayhost'], parameters['email_recipient'])
start_file.write(start_template)
start_file.close()
current_permissions = os.stat('FireStart')
os.chmod('FireStart', current_permissions.st_mode | stat.S_IEXEC)

	
		
